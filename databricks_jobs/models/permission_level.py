# coding: utf-8

"""
    Jobs API 2.1

    The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/secrets) to manage secrets in the [Databricks CLI](https://docs.microsoft.com/azure/databricks/dev-tools/cli/index). Use the [Secrets utility](https://docs.microsoft.com/azure/databricks/dev-tools/databricks-utils#dbutils-secrets) to reference secrets in notebooks and jobs.  # noqa: E501

    The version of the OpenAPI document: 2.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import Any, List, Optional

from pydantic import BaseModel, Field, StrictStr, ValidationError, validator

from databricks_jobs.models.can_manage import CanManage
from databricks_jobs.models.can_manage_run import CanManageRun
from databricks_jobs.models.can_view import CanView
from databricks_jobs.models.is_owner import IsOwner

PERMISSIONLEVEL_ONE_OF_SCHEMAS = ["CanManage", "CanManageRun", "CanView", "IsOwner"]


class PermissionLevel(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    # data type: CanManage
    oneof_schema_1_validator: Optional[CanManage] = None
    # data type: CanManageRun
    oneof_schema_2_validator: Optional[CanManageRun] = None
    # data type: CanView
    oneof_schema_3_validator: Optional[CanView] = None
    # data type: IsOwner
    oneof_schema_4_validator: Optional[IsOwner] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(PERMISSIONLEVEL_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    @validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = cls()
        error_messages = []
        match = 0
        # validate data type: CanManage
        if type(v) is not CanManage:
            error_messages.append(f"Error! Input type `{type(v)}` is not `CanManage`")
        else:
            match += 1

        # validate data type: CanManageRun
        if type(v) is not CanManageRun:
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `CanManageRun`"
            )
        else:
            match += 1

        # validate data type: CanView
        if type(v) is not CanView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `CanView`")
        else:
            match += 1

        # validate data type: IsOwner
        if type(v) is not IsOwner:
            error_messages.append(f"Error! Input type `{type(v)}` is not `IsOwner`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into PermissionLevel with oneOf schemas: CanManage, CanManageRun, CanView, IsOwner. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into PermissionLevel with oneOf schemas: CanManage, CanManageRun, CanView, IsOwner. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> PermissionLevel:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> PermissionLevel:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        # deserialize data into CanManage
        try:
            instance.actual_instance = CanManage.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into CanManageRun
        try:
            instance.actual_instance = CanManageRun.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into CanView
        try:
            instance.actual_instance = CanView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into IsOwner
        try:
            instance.actual_instance = IsOwner.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into PermissionLevel with oneOf schemas: CanManage, CanManageRun, CanView, IsOwner. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into PermissionLevel with oneOf schemas: CanManage, CanManageRun, CanView, IsOwner. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())
