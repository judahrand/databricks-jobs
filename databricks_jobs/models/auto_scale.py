# coding: utf-8

"""
    Jobs API 2.1

    The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.microsoft.com/azure/databricks/dev-tools/api/latest/secrets) to manage secrets in the [Databricks CLI](https://docs.microsoft.com/azure/databricks/dev-tools/cli/index). Use the [Secrets utility](https://docs.microsoft.com/azure/databricks/dev-tools/databricks-utils#dbutils-secrets) to reference secrets in notebooks and jobs.  # noqa: E501

    The version of the OpenAPI document: 2.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt


class AutoScale(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    min_workers: Optional[StrictInt] = Field(
        None,
        description="The minimum number of workers to which the cluster can scale down when underutilized. It is also the initial number of workers the cluster has after creation.",
    )
    max_workers: Optional[StrictInt] = Field(
        None,
        description="The maximum number of workers to which the cluster can scale up when overloaded. max_workers must be strictly greater than min_workers.",
    )
    __properties = ["min_workers", "max_workers"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutoScale:
        """Create an instance of AutoScale from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutoScale:
        """Create an instance of AutoScale from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AutoScale.parse_obj(obj)

        _obj = AutoScale.parse_obj(
            {
                "min_workers": obj.get("min_workers"),
                "max_workers": obj.get("max_workers"),
            }
        )
        return _obj
